{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport incrmpcorr from '@stdlib/stats-incr-mpcorr' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmapcorr( 3 );\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator( 3.0, -1.0 );\n* // returns ~0.925\n*\n* ar = accumulator( 5.0, -9.5 );\n* // returns ~0.863\n*\n* ar = accumulator();\n* // returns ~0.863\n*\n* @example\n* var accumulator = incrmapcorr( 3, -2.0, 10.0 );\n*/\nfunction incrmapcorr( W, meanx, meany ) {\n\tvar acc;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '0df4o', W ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( '0df4N', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( '0df4O', meany ) );\n\t\t}\n\t\tacc = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tacc = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn abs( r );\n\t\t}\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmapcorr;\n"],"names":["incrmapcorr","W","meanx","meany","acc","isPositiveInteger","TypeError","format","arguments","length","isNumber","incrmpcorr","accumulator","x","y","r","abs"],"mappings":";;+dAkEA,SAASA,EAAaC,EAAGC,EAAOC,GAC/B,IAAIC,EACJ,IAAMC,EAAmBJ,GACxB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,GAAKO,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAUR,GACf,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAEvC,IAAMQ,EAAUP,GACf,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAEvCC,EAAMO,EAAYV,EAAGC,EAAOC,EAC9B,MACEC,EAAMO,EAAYV,GAEnB,OAAOW,EAUP,SAASA,EAAaC,EAAGC,GACxB,IAAIC,EACJ,OAA0B,IAArBP,UAAUC,OAEH,QADXM,EAAIX,KAEIW,EAEDC,EAAKD,GAENC,EAAKZ,EAAKS,EAAGC,GACpB,CACF"}